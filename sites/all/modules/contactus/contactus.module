<?php

/**
 * @file
 * contactus.module
 */

// 50 items per page.
define('TOTAL_ITEMS_PER_PAGE_CONTACT', 50);

// Admin uri links.
define('ADMIN_CONTENT_CONTACTUS_MANAGE_URI', 'admin/content/contact/manage/');
define('ADMIN_CONTENT_CONTACTUS_URI', 'admin/content/contact');

/**
 * Implements hook_entity_info().
 */
function contactus_entity_info() {
    $contactus_entity_info['contactus'] = array(
        'label' => t('Contact Us'),
        'label callback' => 'contactus_label_callback',
        'entity class' => 'contactus',
        'controller class' => 'contactController',
        'base table' => 'contactus',
        'uri callback' => 'contactus_uri',
        'fieldable' => TRUE,
        'entity keys' => array(
            'id' => 'contact_id',
        ),
        //'uri callback' => 'entity_class_uri',
        //'load hook' => 'lawmakers_load',
        'static cache' => TRUE,
         'admin ui' => array(
      'path' => 'admin/content/contactus',
      'controller class' => 'contactusUIController',
      'file' => 'includes/contactus.admin.inc',
    ),
        'module' => 'contactus',
        'access callback' => 'contactus_access_callback',
        'bundles' => array(
            'contact' => array(
                'label' => 'Contacts',
                'admin' => array(
                    'path' => 'admin/structure/contact/manage',
                    'access arguments' => array('administer contact'),
                ),
            ),
        ),
        'views controller class' => 'EntityDefaultViewsController',
    );

    return $contactus_entity_info;
}


/**
 * Custom controller for the lawmakers entity.
 */
class contactController extends EntityAPIController {

    /**
     * Override the save method.
     */
    public function save($entity, DatabaseTransaction $transaction = NULL) {
        if (isset($entity->is_new)) {
            $entity->created = REQUEST_TIME;
        }

        $entity->changed = REQUEST_TIME;
        return parent::save($entity, $transaction);
    }
}


function contactus_access_callback() {
    if (user_is_anonymous() && !user_access('administer Contactus entities')) {
        return FALSE;
    }
    else {
        return TRUE;
    }
}

function contactus_permission() {
    return array(
        'administer Contactus entities' => array(
            'title' => t('Administer contact us Entities'),
            'description' => t('Allows a user to administer contact us entities'),
        ),
        'view contact entities' => array(
            'title' => t('View contact Entity'),
            'description' => t('Allows a user to view the contact entities.'),
        ),

    );
}


/**
 * Custom controller for the administrator UI.
 */
class contactusUIController extends EntityDefaultUIController {

    /**
     * Override the menu hook for default ui controller.
     */
    public function hook_menu() {
        $items = parent::hook_menu();
        $items[$this->path]['title'] = t('Contact us');
        $items[$this->path]['description'] = t('Manage Contact us, including fields.');
        $items[$this->path]['access callback'] = 'contactus_access_callback';
        $items[$this->path]['access arguments'] = array('administer Contact us entities');
        $items[$this->path]['type'] = MENU_LOCAL_TASK;
        return $items;
    }

    /**
     * Admin form for searching and doing bulk operations.
     */
    public function overviewForm($form, &$form_state) {
        $form['pager'] = array('#theme' => 'pager');
        //echo 656;

        $header = array(
            'contact_id' => array('data' => t('Contact  ID'), 'field' => 'contact_id'),
            'first_name' => array('data' => t('First Name'), 'field' => 'first_name'),
            'last_name' => array('data' => t('last name'), 'field' => 'last_name'),
        );

        $options = array();
        $search_term = !empty($_GET['search']) ? $_GET['search'] : NULL;

        $query = new EntityFieldQuery();
        $query
            ->entityCondition('entity_type', 'contactus');

        if (!empty($search_term)) {
            $query->propertyCondition('first_name', '%' . $search_term . '%', 'like');
        }
        // Check for sort order and sort key.
        if (!empty($_GET['sort']) && !empty($_GET['order'])) {
            $sort = strtoupper($_GET['sort']);
            $order = strtolower($_GET['order']);
            $order = str_replace(' ', '_', $order);
            if ($order != 'operations') {
                $query->propertyOrderBy($order, $sort);
            }
        }

        $query->pager(TOTAL_ITEMS_PER_PAGE);

        $result = $query->execute();
        var_dump($result);
        $lawmakers_results = !empty($result['lawmakers']) ? $result['lawmakers'] : array();
        $lawmakers_array = !empty($lawmakers_results) ? lawmakers_load_multiple(array_keys($lawmakers_results)) : array();
        foreach ($lawmakers_array as $lawmakers_id => $lawmakers) {
            $options['lawmakers_id-' . $lawmakers_id] = array(
                'lawmakers_id' => l($lawmakers->lawmakers_id, 'lawmakers/' . $lawmakers->lawmakers_id),
                'username' => l($lawmakers->username, 'lawmakers/' . $lawmakers->lawmakers_id),
                'operations' =>
                    l(t('View'), 'lawmakers/' . $lawmakers->lawmakers_id) . ' ' .
                    l(t('Edit'), ADMIN_CONTENT_LAWMAKERS_MANAGE_URI . $lawmakers_id, array('query' => array('destination' => ADMIN_CONTENT_LAWMAKERS_URI))) . ' ' .
                    l(t('Delete'), ADMIN_CONTENT_LAWMAKERS_MANAGE_URI . $lawmakers_id . '/delete', array('attributes' => array('class' => array('lawmakers-delete-' . $lawmakers->lawmakers_id), ), 'query' => array('destination' => ADMIN_CONTENT_LAWMAKERS_URI))),
            );
        }

        $form['search'] = array(
            '#type' => 'fieldset',
            '#title' => t('Basic Search'),
            '#collapsible' => TRUE,
            '#collapsed' => !empty($search_term) ? FALSE : TRUE,
        );

        $form['search']['search_text'] = array(
            '#type' => 'textfield',
            '#title' => t('Search Term'),
            '#default_value' => !empty($search_term) ? $search_term : '',
        );

        $form['search']['search_submit'] = array(
            '#type' => 'submit',
            '#value' => t('Search'),
        );

        $form['bulk_operations'] = array(
            '#type' => 'fieldset',
            '#title' => t('Bulk Operations'),
            '#collapsible' => TRUE,
            '#collapsed' => TRUE,
        );

        $form['bulk_operations']['operations'] = array(
            '#type' => 'select',
            '#options' => array(
                0 => t('Select a bulk operation'),
                'delete' => t('Delete selected lawmakers'),
            ),
        );

        $form['bulk_operations']['submit'] = array(
            '#type' => 'submit',
            '#value' => t('Submit'),
        );

        $form['entities'] = array(
            '#type' => 'tableselect',
            '#header' => $header,
            '#options' => $options,
            '#attributes' => array('class' => array('entity-sort-table')),
            '#empty' => t('There are no lawmakers.'),
        );

        return $form;
    }

    /**
     * Form Submit method.
     */
    public function overviewFormSubmit($form, &$form_state) {
        $values = $form_state['input'];
        $contact_ids = array();

        if (!empty($values['entities'])) {
            foreach ($values['entities'] as $index => $value) {
                if (!empty($value)) {
                    $contact_ids[] = str_replace('$contact_ids-', '', $value);
                }
            }

            switch ($values['operations']) {
                case 'delete':
                    drupal_goto('admin/content/contactus/bulk/delete/' . implode('|', $contact_ids));
                    break;
            }
        }

        if (!empty($values['search_text'])) {
            drupal_goto('admin/content/contactus', array('query' => array('search' => $values['search_text'])));
        }
    }

}

class contactus extends Entity {
    /**
     * Override defaultUri().
     */
    protected function defaultUri() {
        return array('path' => 'contactus/' . $this->identifier());
    }
}

